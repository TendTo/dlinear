digraph mygraph {
  node [shape=box];
  "/:dreal"
  "/:dreal" -> "/:main_program"
  "/:main_program"
  "/:main_program" -> "/util:filesystem\n@ezoptionparser"
  "/:main_program" -> "@fmt"
  "/:main_program" -> "/:qsopt-ex"
  "/:main_program" -> "/:soplex"
  "/:main_program" -> "/util:infty"
  "/:main_program" -> "//:soplex-enabled"
  "/:main_program" -> "/smt2:smt2"
  "/:main_program" -> "/util:rounding_mode_guard"
  "/:main_program" -> "/solver:config"
  "/:main_program" -> "/util:logging"
  "/util:filesystem\n@ezoptionparser"
  "/smt2:smt2"
  "/smt2:smt2" -> "/solver:solver"
  "/smt2:smt2" -> "/util:string_to_interval"
  "/smt2:smt2" -> "/smt2:parser"
  "/smt2:smt2" -> "/smt2:scanner"
  "/smt2:smt2" -> "/util:math"
  "/smt2:smt2" -> "/symbolic:symbolic"
  "/smt2:smt2" -> "/util:scoped_unordered_map"
  "/smt2:smt2" -> "/smt2:logic"
  "/smt2:smt2" -> "/smt2:sort"
  "/smt2:smt2" -> "/smt2:term"
  "/smt2:smt2" -> "//third_party/flex"
  "/smt2:term"
  "/smt2:term" -> "/util:exception"
  "/smt2:term" -> "/symbolic:symbolic"
  "/util:string_to_interval"
  "/util:string_to_interval" -> "/util:rounding_mode_guard"
  "/util:string_to_interval" -> "/util:box"
  "/solver:solver"
  "/solver:solver" -> "/util:box"
  "/solver:solver" -> "/symbolic:symbolic"
  "/solver:solver" -> "/smt2:logic"
  "/solver:solver" -> "/:version_header"
  "/solver:solver" -> "/smt2:sort"
  "/solver:solver" -> "/util:math"
  "/solver:solver" -> "/util:nnfizer"
  "/solver:solver" -> "/util:stat\n/util:timer"
  "/solver:solver" -> "/util:exception"
  "/solver:solver" -> "/util:scoped_vector\n/util:scoped_unordered_set"
  "/solver:solver" -> "/util:cds"
  "/solver:solver" -> "//third_party/thread_pool\n@picosat\n/util:interrupt"
  "/solver:solver" -> "/util:bitset"
  "/solver:solver" -> "/util:assert"
  "/solver:solver" -> "/util:logging"
  "/solver:solver" -> "/util:if_then_else_eliminator"
  "/solver:solver" -> "/solver:config"
  "/solver:solver" -> "/:soplex"
  "/solver:solver" -> "//:soplex-enabled"
  "/solver:solver" -> "/util:infty"
  "/solver:solver" -> "/util:literal"
  "/solver:solver" -> "/util:pg_cnfizer"
  "/solver:solver" -> "/util:scoped_unordered_map"
  "/solver:solver" -> "/util:predicate_abstractor"
  "/solver:solver" -> "/util:optional"
  "/solver:solver" -> "/:qsopt-ex"
  "/solver:solver" -> "@fmt"
  "/:qsopt-ex"
  "/:qsopt-ex" -> "@linux_libs//:gmpxx"
  "/:qsopt-ex" -> "//:qsopt-ex"
  "//:qsopt-ex"
  "//:qsopt-ex" -> "//:qsopt-ex-import"
  "//:qsopt-ex-import"
  "//:qsopt-ex-import" -> "@linux_libs//:gmpxx"
  "/util:optional"
  "/util:optional" -> "//third_party/optional"
  "/util:predicate_abstractor"
  "/util:predicate_abstractor" -> "/util:stat\n/util:timer"
  "/util:predicate_abstractor" -> "/symbolic:symbolic"
  "/util:scoped_unordered_map"
  "/util:scoped_unordered_map" -> "/util:assert"
  "/util:scoped_unordered_map" -> "/util:exception"
  "/util:pg_cnfizer"
  "/util:pg_cnfizer" -> "/util:stat\n/util:timer"
  "/util:pg_cnfizer" -> "/symbolic:symbolic"
  "/util:pg_cnfizer" -> "/util:assert"
  "/util:pg_cnfizer" -> "/util:exception"
  "/util:pg_cnfizer" -> "/util:logging"
  "/util:pg_cnfizer" -> "/util:naive_cnfizer"
  "/util:naive_cnfizer"
  "/util:naive_cnfizer" -> "/util:assert"
  "/util:naive_cnfizer" -> "/util:exception"
  "/util:naive_cnfizer" -> "/util:nnfizer"
  "/util:naive_cnfizer" -> "/symbolic:symbolic"
  "/util:literal"
  "/util:literal" -> "/symbolic:symbolic"
  "//:soplex-enabled"
  "//:soplex-enabled" -> "//:enable-soplex"
  "//:enable-soplex"
  "/solver:config"
  "/solver:config" -> "/util:option_value"
  "/solver:config" -> "/util:bitset"
  "/solver:config" -> "/util:box"
  "//third_party/thread_pool\n@picosat\n/util:interrupt"
  "/util:cds"
  "/util:cds" -> "@cds"
  "@cds"
  "/util:scoped_vector\n/util:scoped_unordered_set"
  "/util:scoped_vector\n/util:scoped_unordered_set" -> "/util:assert"
  "/util:scoped_vector\n/util:scoped_unordered_set" -> "/util:exception"
  "/smt2:sort"
  "/smt2:sort" -> "/util:exception"
  "/smt2:sort" -> "/symbolic:symbolic"
  "/:version_header"
  "/:soplex"
  "/:soplex" -> "//:soplex"
  "/:soplex" -> "@linux_libs//:gmpxx"
  "//:soplex"
  "//:soplex" -> "@linux_libs//:gmp"
  "//:soplex" -> "@linux_libs//:z"
  "@linux_libs//:z"
  "/util:if_then_else_eliminator"
  "/util:if_then_else_eliminator" -> "/symbolic:symbolic"
  "/util:if_then_else_eliminator" -> "/util:nnfizer"
  "/util:if_then_else_eliminator" -> "/util:stat\n/util:timer"
  "/util:if_then_else_eliminator" -> "/util:logging"
  "/util:stat\n/util:timer"
  "/util:nnfizer"
  "/util:nnfizer" -> "/symbolic:symbolic"
  "/util:bitset"
  "/util:bitset" -> "//third_party/bitset"
  "//third_party/bitset"
  "//third_party/optional"
  "/util:option_value"
  "/util:option_value" -> "/symbolic:symbolic"
  "/smt2:logic"
  "/smt2:logic" -> "/util:exception"
  "/util:box"
  "/util:box" -> "/:gmp"
  "/util:box" -> "/symbolic:symbolic"
  "/util:box" -> "/util:assert"
  "/util:box" -> "/util:exception"
  "/util:box" -> "/util:logging"
  "/util:box" -> "/util:math"
  "/util:box" -> "/util:infty"
  "/util:math"
  "/util:math" -> "/util:exception"
  "/util:math" -> "/:gmp"
  "/symbolic:symbolic"
  "/symbolic:symbolic" -> "//third_party/drake"
  "/symbolic:symbolic" -> "/util:logging"
  "/symbolic:symbolic" -> "/util:exception"
  "/symbolic:symbolic" -> "/util:assert"
  "/util:assert"
  "/util:exception"
  "/util:exception" -> "@fmt"
  "/util:logging"
  "/util:logging" -> "@spdlog"
  "@spdlog"
  "@spdlog" -> "@fmt"
  "//third_party/drake"
  "//third_party/drake" -> "/util:infty"
  "//third_party/drake" -> "/:gmp"
  "/util:infty"
  "/util:infty" -> "@linux_libs//:gmpxx"
  "/:gmp"
  "/:gmp" -> "@linux_libs//:gmpxx"
  "/:gmp" -> "@fmt"
  "@fmt"
  "@linux_libs//:gmpxx"
  "@linux_libs//:gmpxx" -> "@linux_libs//:gmp"
  "@linux_libs//:gmp"
  "/smt2:scanner"
  "/smt2:scanner" -> "/smt2:parser"
  "/smt2:scanner" -> "//third_party/lexyacc"
  "/smt2:parser"
  "/smt2:parser" -> "//third_party/lexyacc"
  "//third_party/lexyacc"
  "/util:rounding_mode_guard"
}
