"""Module for the dlinear repository"""

module(
    name = "dlinear",
    version = "0.0.1",
)

# Apache License 2.0 | rules_cc for building C++ libraries with Bazel
bazel_dep(name = "rules_cc", version = "0.0.10")

# Apache License 2.0 | rules_foreign_cc for building C++ libraries with other build systems
bazel_dep(name = "rules_foreign_cc", version = "0.12.0")

# Apache License 2.0 | rules_python for building python targets
bazel_dep(name = "rules_python", version = "0.33.1")

# Apache License 2.0 | bazel rules to gather system information
bazel_dep(name = "platforms", version = "0.0.10")

# https://github.com/madler/zlib/blob/develop/LICENSE | zlib compression library
bazel_dep(name = "zlib", version = "1.3.1")

# Apache License 2.0 | utility rules for Bazel
bazel_dep(name = "bazel_skylib", version = "1.7.1")

# https://github.com/pybind/pybind11_bazel/blob/master/LICENSE | pybind11 for binding C++ and Python
bazel_dep(name = "pybind11_bazel", version = "2.12.0")

# https://github.com/libarchive/bzip2/blob/master/COPYING | Compression library
bazel_dep(name = "bzip2", version = "1.0.8")

# MIT | argparse implementation for modern C++
bazel_dep(name = "argparse", version = "3.0.0")

# MIT | C++ library for formatting text
bazel_dep(name = "fmt", version = "11.0.2")

# BSD | lexical analyser generator
bazel_dep(name = "rules_flex", version = "0.2.1")

# https://www.gnu.org/software/bison/manual/html_node/Conditions.html | Bison parser generator
bazel_dep(name = "rules_bison", version = "0.2.2")

# Apache License 2.0 | Open Neural Network Exchange (ONNX) format support
bazel_dep(name = "onnx", version = "1.16.2")

# MIT | C++ json library
bazel_dep(name = "nlohmann_json", version = "3.11.3")

# https://github.com/cpplint/cpplint/blob/develop/LICENSE | Google C++ Style Guide
bazel_dep(name = "cpplint", version = "1.6.1", dev_dependency = True)

# BSD-3-Clause license | c++ test suite by Google
bazel_dep(name = "googletest", version = "1.15.2", dev_dependency = True)

# Apache License 2.0 | Bazel rules for packaging the project
bazel_dep(name = "rules_pkg", version = "1.0.1", dev_dependency = True)

# Apache License 2.0 | Bazel rules for packaging the project
bazel_dep(name = "rules_doxygen", version = "1.1.3", dev_dependency = True)

# MIT | rules for dealing with target dependencies
bazel_dep(name = "depend_on_what_you_use", version = "0.5.0", dev_dependency = True)

# Apache License 2.0 | Integration of Boost into Bazel
bazel_dep(name = "com_github_nelhage_rules_boost", version = "0.0.1")
git_override(
    module_name = "com_github_nelhage_rules_boost",
    commit = "37043509947dc88627b45c283b974e05ad308bdc",
    remote = "https://github.com/TendTo/rules_boost.git",
)

# Apache License 2.0 | Implementation of IWYU for Bazel
bazel_dep(name = "bazel_iwyu", version = "0.0.1", dev_dependency = True)
git_override(
    module_name = "bazel_iwyu",
    commit = "85cbd99369a3ed3f8c31234d2d887026f3e66bbc",
    remote = "https://github.com/TendTo/bazel_iwyu",
)

# Repository dependencies (see WORKSPACE for more details)

## Github repositories

github_archive = use_repo_rule("//tools:git_archive.bzl", "github_archive")

# MIT | logging library
github_archive(
    name = "spdlog",
    build_file = "//third_party:spdlog.BUILD.bazel",
    commit = "v1.12.0",
    repository = "gabime/spdlog",
    sha256 = "4dccf2d10f410c1e2feaff89966bfc49a1abb29ef6f08246335b110e001e09a9",
)

# Apache License 2.0 | linear programming solver
github_archive(
    name = "soplex",
    build_file = "//third_party:soplex.BUILD.bazel",
    commit = "91f8c2a8b92fd67d474c9195917f1ff527f05aca",
    repository = "TendTo/soplex",
    sha256 = "09cef69536bdb11af9d148c28a36289d7a7a196052c46fbfa7e049ca6b005d14",
)

# GNU General Public License v3.0 | delta-complete linear programming solver
github_archive(
    name = "qsopt_ex",
    build_file = "//third_party:qsopt_ex.BUILD.bazel",
    commit = "4646dc3bec76532827c479f7c51d8a71a35806de",
    repository = "TendTo/qsopt-ex",
    sha256 = "610222f0023213e17b395d23fdcaf918d6102b020e445902014e0518a30c900d",
)

# MIT | SAT solver
github_archive(
    name = "picosat",  # MIT
    build_file = "//third_party:picosat.BUILD.bazel",
    commit = "ee542566ca89717af1b4558b0b3f226eb3b6b42d",  # master
    repository = "dreal-deps/picosat",
    sha256 = "9a047b7ba3ac1075a2288d35045585e2e3c24961f078f30ad97a313b8e539eb2",
)

# BSD 3 | C++ generic template library
github_archive(
    name = "xtl",
    build_file = "//third_party:xtl.BUILD.bazel",
    commit = "0.7.7",
    repository = "xtensor-stack/xtl",
    sha256 = "44fb99fbf5e56af5c43619fc8c29aa58e5fad18f3ba6e7d9c55c111b62df1fbb",
)

# BSD 3 | C++ generic template library
github_archive(
    name = "xtensor",
    build_file = "//third_party:xtensor.BUILD.bazel",
    commit = "0.25.0",
    repository = "xtensor-stack/xtensor",
    sha256 = "32d5d9fd23998c57e746c375a544edf544b74f0a18ad6bc3c38cbba968d5e6c7",
)

# MIT | cadical SAT solver
github_archive(
    name = "cadical",
    build_file = "//third_party:cadical.BUILD.bazel",
    commit = "rel-2.0.0",
    repository = "arminbiere/cadical",
    sha256 = "9afe5f6439442d854e56fc1fac3244ce241dbb490735939def8fd03584f89331",
)

## Gitlab repositories

gitlab_archive = use_repo_rule("//tools:git_archive.bzl", "gitlab_archive")

# MIT | c++ library for arbitrary precision arithmetic
gitlab_archive(
    name = "mpfr",
    build_file = "//third_party:mpfr.BUILD.bazel",
    commit = "4.2.1",
    domain = "inria.fr",
    repository = "mpfr/mpfr",
    sha256 = "e34aab8b2cdcc3f37ef8bd1b33fcd9867b472412698c6a0ec60dbb4970f88a3d",
)

## HTTP repositories

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# GNU Lesser General Public License v3.0 | arbitrary precision arithmetic library
http_archive(
    name = "gmp",
    build_file = "//third_party:gmp.BUILD.bazel",
    sha256 = "a3c2b80201b89e68616f4ad30bc66aee4927c3ce50e33929ca819d5c43538898",
    strip_prefix = "gmp-6.3.0",
    url = "https://ftp.gnu.org/gnu/gmp/gmp-6.3.0.tar.xz",
)

http_archive(
    name = "com_github_storypku_bazel_iwyu",
    sha256 = "aa78c331a2cb139f73f7d74eeb4d5ab29794af82023ef5d6d5194f76b7d37449",
    strip_prefix = "bazel_iwyu-0.19.2",
    urls = [
        "https://github.com/storypku/bazel_iwyu/archive/0.19.2.tar.gz",
    ],
)

# Extensions

boost_modules = use_extension("@com_github_nelhage_rules_boost//:extensions.bzl", "boost_modules")
boost_modules.version(
    sha256 = "4d27e9efed0f6f152dc28db6430b9d3dfb40c0345da7342eaa5a987dde57bd95",
    version = "1.84.0",
)
use_repo(boost_modules, "boost")

doxygen_extension = use_extension("@rules_doxygen//:extensions.bzl", "doxygen_extension")
use_repo(doxygen_extension, "doxygen")

flex = use_extension("@rules_flex//flex/extensions:flex_repository_ext.bzl", "flex_repository_ext")
flex.repository(
    name = "flex",
    extra_copts = ["-O3"],
    version = "2.6.4",
)
use_repo(flex, "flex")

register_toolchains("@flex//:toolchain")

bison = use_extension("@rules_bison//bison/extensions:bison_repository_ext.bzl", "bison_repository_ext")
bison.repository(
    name = "bison",
    extra_copts = ["-O3"],
    version = "3.3.2",
)
use_repo(bison, "bison")

register_toolchains("@bison//:toolchain")

new_local_repository = use_repo_rule("//tools:local.bzl", "new_local_repository")

new_local_repository(
    name = "system_deps",
    build_file = "//third_party:system_deps.BUILD.bazel",
    path = "/usr",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.8",
)
python.toolchain(
    python_version = "3.9",
)
python.toolchain(
    is_default = True,
    python_version = "3.10",
)
python.toolchain(
    python_version = "3.11",
)
python.toolchain(
    python_version = "3.12",
)
use_repo(
    python,
    "python_3_10",
    "python_3_11",
    "python_3_12",
    "python_3_8",
    "python_3_9",
    "python_versions",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.8",
    requirements_lock = "//tools:requirements.txt",
)
pip.parse(
    hub_name = "pypi",
    python_version = "3.9",
    requirements_lock = "//tools:requirements.txt",
)
pip.parse(
    hub_name = "pypi",
    python_version = "3.10",
    requirements_lock = "//tools:requirements.txt",
)
pip.parse(
    hub_name = "pypi",
    python_version = "3.11",
    requirements_lock = "//tools:requirements.txt",
)
pip.parse(
    hub_name = "pypi",
    python_version = "3.12",
    requirements_lock = "//tools:requirements.txt",
)
use_repo(pip, "pypi")
