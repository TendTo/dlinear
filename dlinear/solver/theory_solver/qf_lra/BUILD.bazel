load("//tools:cpplint.bzl", "cpplint")
load("//tools:dlinear.bzl", "dlinear_cc_library", "dlinear_srcs")

package(default_visibility = [
    "//dlinear:__subpackages__",
    "//test:__subpackages__",
])

dlinear_srcs(
    name = "srcs",
    subfolder = "qf_lra",
)

dlinear_cc_library(
    name = "lp_sense",
    srcs = ["LpRowSense.cpp"],
    hdrs = ["LpRowSense.h"],
    implementation_deps = ["//dlinear/util:error"],
    deps = [
        "//dlinear/symbolic",
        "//dlinear/util:logging",
    ],
)

dlinear_cc_library(
    name = "lp_result",
    srcs = ["LpResult.cpp"],
    hdrs = ["LpResult.h"],
    implementation_deps = ["//dlinear/util:error"],
    deps = ["//dlinear/util:logging"],
)

dlinear_cc_library(
    name = "lp_bound",
    srcs = ["LpColBound.cpp"],
    hdrs = ["LpColBound.h"],
    implementation_deps = ["//dlinear/util:error"],
    deps = ["//dlinear/util:logging"],
)

dlinear_cc_library(
    name = "lp_bound_violation",
    srcs = ["LpBoundViolation.cpp"],
    hdrs = ["LpBoundViolation.h"],
    deps = ["//dlinear/util:logging"],
)

dlinear_cc_library(
    name = "preprocessors",
    srcs = [
        #        "BoundPreprocessor.cpp",
        "EqBinomialBoundPreprocessor.cpp",
        "FormulaEvaluatorPreprocessor.cpp",
    ],
    hdrs = [
        #        "BoundPreprocessor.h",
        "EqBinomialBoundPreprocessor.h",
        "FormulaEvaluatorPreprocessor.h",
    ],
    implementation_deps = [
        ":qf_lra_theory_solver",
        "//dlinear/libs:gmp",
        "//dlinear/util:error",
    ],
    deps = [
        ":bound_vector",
        "//dlinear/solver/theory_solver",
        "//dlinear/symbolic:environment",
        "//dlinear/symbolic:literal",
        "//dlinear/symbolic:predicate_abstractor",
        "//dlinear/util:config",
        "//dlinear/util:graph",
        "//dlinear/util:logging",
    ],
)

dlinear_cc_library(
    name = "propagators",
    srcs = ["SimpleBoundPropagator.cpp"],
    hdrs = ["SimpleBoundPropagator.h"],
    implementation_deps = ["//dlinear/util:error"],
    deps = [
        ":lp_sense",
        "//dlinear/libs:gmp",
        "//dlinear/solver/theory_solver",
        "//dlinear/symbolic",
        "//dlinear/util:sorted_vector",
    ],
)

dlinear_cc_library(
    name = "lp_solver",
    srcs = ["LpSolver.cpp"] + select({
        "//tools:enabled_soplex": ["SoplexLpSolver.cpp"],
        "//conditions:default": [],
    }) + select({
        "//tools:enabled_qsoptex": ["QsoptexLpSolver.cpp"],
        "//conditions:default": [],
    }),
    hdrs = ["LpSolver.h"] + select({
        "//tools:enabled_soplex": ["SoplexLpSolver.h"],
        "//conditions:default": [],
    }) + select({
        "//tools:enabled_qsoptex": ["QsoptexLpSolver.h"],
        "//conditions:default": [],
    }),
    implementation_deps = ["//dlinear/util:error"],
    deps = [
        ":lp_bound",
        ":lp_bound_violation",
        ":lp_result",
        ":lp_sense",
        "//dlinear/libs:gmp",
        "//dlinear/symbolic",
        "//dlinear/symbolic:literal",
        "//dlinear/symbolic:predicate_abstractor",
        "//dlinear/util:box",
        "//dlinear/util:config",
        "//dlinear/util:logging",
        "//dlinear/util:stats",
    ] + select({
        "//tools:enabled_soplex": ["//dlinear/libs:soplex"],
        "//conditions:default": [],
    }) + select({
        "//tools:enabled_qsoptex": ["//dlinear/libs:qsopt_ex"],
        "//conditions:default": [],
    }),
)

dlinear_cc_library(
    name = "piecewise_constraint_state",
    srcs = ["PiecewiseConstraintState.cpp"],
    hdrs = ["PiecewiseConstraintState.h"],
    implementation_deps = ["//dlinear/util:error"],
)

dlinear_cc_library(
    name = "piecewise_linear_constraint",
    srcs = ["PiecewiseLinearConstraint.cpp"],
    hdrs = ["PiecewiseLinearConstraint.h"],
    implementation_deps = [
        "//dlinear/util:config",
        "//dlinear/util:error",
        "//dlinear/util:infinity",
    ],
    deps = [
        ":bound_preprocessor",
        ":piecewise_constraint_state",
        "//dlinear/libs:gmp",
        "//dlinear/symbolic",
        "//dlinear/symbolic:literal",
        "//dlinear/util:logging",
    ],
)

dlinear_cc_library(
    name = "relu_constraint",
    srcs = ["ReluConstraint.cpp"],
    hdrs = ["ReluConstraint.h"],
    implementation_deps = [
        ":bound_vector",
        "//dlinear/symbolic:linear_formula_flattener",
        "//dlinear/util:error",
        "//dlinear/util:logging",
    ],
    deps = [
        ":bound_preprocessor",
        ":piecewise_linear_constraint",
        "//dlinear/libs:gmp",
        "//dlinear/symbolic",
        "//dlinear/symbolic:literal",
        "//dlinear/symbolic:predicate_abstractor",
    ],
)

dlinear_cc_library(
    name = "leaky_relu_constraint",
    srcs = ["LeakyReluConstraint.cpp"],
    hdrs = ["LeakyReluConstraint.h"],
    implementation_deps = [
        "//dlinear/symbolic:linear_formula_flattener",
        "//dlinear/util:error",
        "//dlinear/util:infinity",
    ],
    deps = [
        ":piecewise_linear_constraint",
        "//dlinear/symbolic:literal",
        "//dlinear/symbolic:predicate_abstractor",
    ],
)

dlinear_cc_library(
    name = "bound",
    srcs = ["Bound.cpp"],
    hdrs = ["Bound.h"],
    implementation_deps = ["//dlinear/util:error"],
    deps = [
        ":lp_bound",
        "//dlinear/libs:gmp",
        "//dlinear/symbolic",
        "//dlinear/symbolic:literal",
        "//dlinear/util:logging",
    ],
)

dlinear_cc_library(
    name = "bound_iterator",
    srcs = ["BoundIterator.cpp"],
    hdrs = ["BoundIterator.h"],
    implementation_deps = ["//dlinear/util:error"],
    deps = [":bound"],
)

dlinear_cc_library(
    name = "bound_vector",
    srcs = ["BoundVector.cpp"],
    hdrs = ["BoundVector.h"],
    implementation_deps = ["//dlinear/util:error"],
    deps = [
        ":bound_iterator",
        ":lp_bound",
        "//dlinear/libs:gmp",
        "//dlinear/symbolic:literal",
        "//dlinear/util:logging",
        "//dlinear/util:sorted_vector",
    ],
)

dlinear_cc_library(
    name = "bound_preprocessor",
    srcs = ["BoundPreprocessor.cpp"],
    hdrs = ["BoundPreprocessor.h"],
    implementation_deps = [
        "//dlinear/util:error",
        "//dlinear/util:infinity",
    ],
    deps = [
        ":bound_vector",
        "//dlinear/libs:gmp",
        "//dlinear/symbolic",
        "//dlinear/symbolic:environment",
        "//dlinear/symbolic:literal",
        "//dlinear/symbolic:predicate_abstractor",
        "//dlinear/util:config",
        "//dlinear/util:logging",
    ],
)

dlinear_cc_library(
    name = "lp_theory_solver",
    srcs = [
        "CompleteLpTheorySolver.cpp",
        "DeltaLpTheorySolver.cpp",
        "LpTheorySolver.cpp",
    ],
    hdrs = [
        "CompleteLpTheorySolver.h",
        "DeltaLpTheorySolver.h",
        "LpTheorySolver.h",
    ],
    implementation_deps = [
        ":bound_preprocessor",
        ":preprocessors",
        ":propagators",
        "//dlinear/util:error",
        "//dlinear/util:logging",
    ],
    deps = [
        ":lp_solver",
        ":qf_lra_theory_solver",
        "//dlinear/libs:gmp",
        "//dlinear/symbolic",
        "//dlinear/symbolic:literal",
        "//dlinear/symbolic:predicate_abstractor",
        "//dlinear/util:bit_increment_iterator",
        "//dlinear/util:box",
    ],
)

dlinear_cc_library(
    name = "qf_lra_theory_solver",
    srcs = ["QfLraTheorySolver.cpp"],
    hdrs = ["QfLraTheorySolver.h"],
    deps = [
        ":bound_vector",
        "//dlinear/solver/theory_solver",
    ],
)

cpplint()
