load("//tools:dlinear.bzl", "dlinear_cc_library")
load("//tools:cpplint.bzl", "cpplint")

package(default_visibility = [
    "//dlinear:__subpackages__",
    "//tests:__subpackages__",
])

dlinear_cc_library(
    name = "argparser",
    srcs = ["ArgParser.cpp"],
    hdrs = ["ArgParser.h"],
    deps = [
        ":config",
        ":exception",
        ":filesystem",
        ":logging",
        "//dlinear:version",
        "@argparse",
        "@spdlog",
    ],
)

dlinear_cc_library(
    name = "config",
    srcs = ["Config.cpp"],
    hdrs = [
        "Config.h",
        "OptionValue.hpp",
    ],
    deps = [":exception"],
)

dlinear_cc_library(
    name = "exception",
    hdrs = ["exception.h"],
    deps = [
        ":logging",
        "@spdlog",
    ],
)

dlinear_cc_library(
    name = "logging",
    srcs = ["logging.cpp"],
    hdrs = ["logging.h"],
    deps = ["@spdlog"],
)

dlinear_cc_library(
    name = "stats",
    srcs = ["Stats.cpp"],
    hdrs = ["Stats.h"],
    deps = [":logging"],
)

dlinear_cc_library(
    name = "infty",
    srcs = ["infty.cpp"],
    hdrs = ["infty.h"],
    visibility = [
        "//dlinear:__subpackages__",
        "//tests:__subpackages__",
        "//third_party:__subpackages__",
    ],
    deps = [
        ":logging",
        "//dlinear/libs:gmp",
    ],
)

dlinear_cc_library(
    name = "box",
    srcs = ["Box.cpp"],
    hdrs = ["Box.h"],
    deps = [
        ":logging",
        ":math",
        "//dlinear/symbolic",
    ],
)

dlinear_cc_library(
    name = "math",
    srcs = ["math.cpp"],
    hdrs = ["math.h"],
    deps = [
        ":exception",
        ":logging",
        "//dlinear/libs:gmp",
    ],
)

dlinear_cc_library(
    name = "scoped_structures",
    hdrs = [
        "ScopedUnorderedMap.hpp",
        "ScopedUnorderedSet.hpp",
        "ScopedVector.hpp",
    ],
    deps = [":exception"],
)

dlinear_cc_library(
    name = "filesystem",
    srcs = ["filesystem.cpp"],
    hdrs = ["filesystem.h"],
    deps = [":logging"],
)

dlinear_cc_library(
    name = "timer",
    srcs = ["Timer.cpp"],
    hdrs = ["Timer.h"],
    deps = [":logging"],
)

dlinear_cc_library(
    name = "predicate_abstractor",
    srcs = ["PredicateAbstractor.cpp"],
    hdrs = ["PredicateAbstractor.h"],
    deps = [
        ":logging",
        ":stats",
        ":timer",
        "//dlinear/symbolic",
    ],
)

cpplint()
