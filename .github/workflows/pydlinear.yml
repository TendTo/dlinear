name: dlinear CI

on:
  push:
    branches: [main, feat/nn-verification]
    paths:
      - "dlinear/**"
      - "pydlinear/**"
  pull_request:
    branches: [main, feat/nn-verification]
    paths:
      - "dlinear/**"
      - "pydlinear/**"

env:
  PACKAGES: "python3 build-essential automake libtool flex bison"
  ARTIFACT_PATH: ""

jobs:
  build-wheel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: ${{ env.PACKAGES }}
          version: 1.0

      - name: Cache Bazel
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bazel
          key: ${{ runner.os }}-bazel-${{ hashFiles('.bazelversion', '.bazelrc', 'MODULE.bazel') }}
          restore-keys: |
            ${{ runner.os }}-bazel-

      - name: Build
        run: |
          bazel build --config=pydlinear --python_version=${{ matrix.python-version }} //pydlinear:pydlinear_wheel 
          $(bazel cquery --output=files //pydlinear:pydlinear_wheel) > $ARTIFACT_PATH

      - uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.python-version }}-${{ github.sha }}
          path: ${{ env.ARTIFACT_PATH }}
  
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: ${{ env.PACKAGES }}
          version: 1.0

      - name: Cache Bazel
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bazel
          key: ${{ runner.os }}-bazel-${{ hashFiles('.bazelversion', '.bazelrc', 'MODULE.bazel') }}
          restore-keys: |
            ${{ runner.os }}-bazel-

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build
        run: |
          python3 -m setup sdist

      - uses: actions/upload-artifact@v4
        with:
          name: build-sdist-${{ github.sha }}
          path: dist/*

  publish:
    runs-on: ubuntu-latest
    needs: 
      - build-wheel
      - build

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        run: |
          twine upload dist/*
